// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: recipes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (id, updated_at, created_at, title, description, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, title, description, user_id
`

type CreateRecipeParams struct {
	ID          uuid.UUID
	UpdatedAt   time.Time
	CreatedAt   time.Time
	Title       string
	Description string
	UserID      uuid.UUID
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.ID,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.Title,
		arg.Description,
		arg.UserID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, created_at, updated_at, title, description, user_id FROM recipes WHERE id = $1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, created_at, updated_at, title, description, user_id FROM recipes
LIMIT $1
OFFSET $2
`

type GetRecipesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRecipes(ctx context.Context, arg GetRecipesParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
